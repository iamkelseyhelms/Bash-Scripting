#!/bin/bash
#
# Author: Kelsey Helms
# Date created: January 13, 2017
# Filename: stats
#
# Overview: this program calculates stats on rows or columns
#

###################################
#           Variables             #
###################################
inputFile=""    # file to hold initial numbers
average=0    # average to be calculated
median=0    # median to be calculated

tempInputFile=$(mktemp)    # temp file to read from stdin
avTempFile=$(mktemp)    # temp file to hold averages
medTempFile=$(mktemp)    # temp file to hold medians
tempFile=$(mktemp)    # temp file to sort numbers in order to find median 

# remove temp files
trap "rm -rf $tempInputFile $avTempFile $medTempFile $tempFile" INT HUP TERM EXIT

###################################
#           Functions             #
###################################
# prints out usage and redirects stdout to stderr, exiting with status 1
function errorStatus
{
    echo "$0 {-rows|-cols} [file]" 1>&2
    exit 1
}


# calculates average using parameters of size and sum
function calculateAverage
{
    size=$1
    sum=$2

    # make sure no division by 0
    if [[ $size == 0 ]]
    then
        average=""
    else
        # formula (sum+(size/2))/size to round the integer
        average=$(($(($sum + $((size / 2)))) / $size))
    fi
}


# calculates median using parameters of values and size
function calculateMedian
{
    values=$1
    size=$2

    # sort values into temp file
    echo $values | tr " " "\n" | sort -g > $tempFile

    # find middle position
    midNum=$(($size / 2 + 1))

    #get number at middle position
    median=$(awk 'NR=='$midNum'' $tempFile)
}


# makes calculations and formats output using rows as data
function rowsOption
{
    # create header
    printf "Average\tMedian\n"

    # while there is another row
    while read line
    do
        # count the integers per row
        rowSize=($(echo $line | wc -w))

        # let each integer have its own line for easy calculations
        makeRowVert=$(echo $line | tr "\t" "\n")

        rowSum=0
        for i in $makeRowVert
        do
            # sum up integers from row
            rowSum=$(($i + $rowSum))
        done

        # use size and sum to calculate average
        calculateAverage $rowSize $rowSum

        # use values in row and size to calculate median
        calculateMedian "$makeRowVert" $rowSize

        # print calculations in correct rows format
        printf "$average\t$median\n"

    # uses inputFile for data in loop
    done <$inputFile
}


# makes calculations and formats output using columns as data
function colsOption
{
    # count the integers in the column
    colSize=$(cut -c 1 $inputFile | wc -w)

    # count the number of columns
    numOfCols=($(head -n 1 $inputFile | wc -w))

    # while there is another column
    for i in $(seq 1 $numOfCols)
    do
        # take each column separately for calculation
        values=$(cut -f $i $inputFile | tr "\t" "\n")

        columnSum=0
        for j in $values
        do
            # sum up integers from column
            columnSum=$(($j + $columnSum))
        done

        # use size and sum to calculate average
        calculateAverage $colSize $columnSum

        # use values in column and size to calculate median
        calculateMedian "$values" $colSize

        # stores first average and median into temp files
	if [ $i -eq 1 ]
	then
	    printf "$average" >> $avTempFile
    	    printf "$median" >> $medTempFile

        # appends any other averages and medians to temp files, including tabs
	else
 	    sed -e "s/$/	$average/" -i $avTempFile
	    sed -e "s/$/	$median/" -i $medTempFile
	fi
    done

    # if inputFile is larger than zero
    if [[ -s $inputFile ]]

    # print calculations in correct columns format
    then 
        echo "Averages:"
        cat $avTempFile
        printf "\n"
        echo "Medians:"
        cat $medTempFile
        printf "\n"

    # otherwise, print header only
    else
        printf "Averages:\n"
        printf "Medians:\n"
    fi
}


###################################
#             Main                #
###################################
# make sure there are correct number of parameters
if [[ $# -lt 1 || $# -gt 2 ]]
then
    errorStatus
fi

# if there is one parameter, use data from stdin
if [[ "$2" == "" ]]
then
    while read line
    do
        # read data from stdin into temp file
        echo "$line" >> $tempInputFile
    done
    # set inputFile using temp file
    inputFile=$tempInputFile

# otherwise, use second parameter
else
    inputFile=$2
fi

# make sure inputFile is readable
if [[ ! -r $inputFile ]]
then
    echo "$0: cannot read $2" 1>&2
    exit 1
fi

# if first parameter starts with -r, use row formatting
if [[ "$1" == -r* ]]
then
    rowsOption

# if first parameter starts with -c, use column formatting
elif [[ "$1" == -c* ]]
then
    colsOption

# otherwise, there was an error in usage
else
    errorStatus
fi

# delete the temporary files
rm -rf $tempInputFile $avTempFile $medTempFile $tempFile

# exit success!
exit 0
